import telebot
from telebot import types
from models_pack import db_access, my_loging
from token_const import token

bot = telebot.TeleBot(token)


def parse_user(message: types.Message):
    info = '{name} {surname} ({user_id})'.\
        format(name=message.from_user.first_name,
               surname=message.from_user.last_name,
               user_id=message.from_user.id)
    return info


def get_main_markup():
    main_markup = types.ReplyKeyboardMarkup()
    main_markup.row('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ãüì≤', '–õ–∏–¥–µ—Ä—ã –ø–æ –∏–≥—Ä–∞–º‚öúÔ∏è')
    main_markup.row('–°–ø—Ä–∞–≤–∫–∞üåö')
    return main_markup


def get_games_markup():
    games_markup = types.ReplyKeyboardMarkup()
    list_of_games = db_access.get_all_games()
    for game in list_of_games:
        games_markup.row(game.game_name)
    games_markup.row('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚úÖ')
    return games_markup


@bot.message_handler(commands=['start'])
@bot.message_handler(func=lambda message: message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚úÖ')
def main_start(message: types.Message):
    my_loging.info('{user} -- –Ω–∞—á–∞—Ç–∞ —Ä–∞–±–æ—Ç–∞ —Å –±–æ—Ç–æ–º, –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ /start –∏–ª–∏ –ì–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                   .format(user=parse_user(message)))
    bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, ' + message.from_user.first_name
                     + ', —á—Ç–æ –∂–µ–ª–∞–µ—à—å?', reply_markup=get_main_markup())


@bot.message_handler(func=lambda message: message.text == '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ãüì≤')
def aviable_games(message: types.Message):
    msg = bot.send_message(message.from_user.id, '–í–æ—Ç —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä',
                           reply_markup=get_games_markup())
    bot.register_next_step_handler(msg, game_info)


def game_info(message: types.Message):
    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚úÖ':
        my_loging.info('{user} -- –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ <–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚úÖ>'.format(user=parse_user(message)))
        bot.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                         reply_markup=get_main_markup())
    else:
        my_loging.info('{user} -- –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ: {game_name}'.format(user=parse_user(message),
                                                                                    game_name=message.text))
        game = db_access.search_game(message.text)
        if game is not None:
            markup = types.ReplyKeyboardMarkup()
            markup.row('–ù–∞—á–∞—Ç—å –∏–≥—Ä—É‚õ≥Ô∏è', '–†–µ–π—Ç–∏–Ω–≥üìä')
            markup.row('–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏', '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ãüì≤')
            msg = bot.send_message(message.from_user.id, game.game_description,
                                   reply_markup=markup)
            bot.register_next_step_handler(msg, options_of_game)
        else:
            bot.send_message(message.from_user.id, '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã')


def options_of_game(message: types.Message):
    user = db_access.get_user(message.from_user.id)
    current_game = user.user_current_game
    if message.text == '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É‚õ≥Ô∏è':
        user = db_access.get_user(message.from_user.id)
        bot.send_message(message.from_user.id, '–¢–∫–µ—Å—Ç')
        if user is None:
            db_access.create_user(message.from_user.first_name, message.from_user.id, current_game.game_name)
            bot.send_message(message.from_user.id, '–í—ã –∑–∞—Ä–µ–≥–∞–Ω—ã')
        else:
            db_access.change_user_game(message.from_user.id, message.text)
            bot.send_message(message.from_user.id, '–ò–≥—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞')
    elif message.text == '–†–µ–π—Ç–∏–Ω–≥üìä':
        pass
    elif message.text == '–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏':
        pass
    else:
        bot.send_message(message.from_user.id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ãüì≤', reply_markup=get_games_markup())


bot.polling(True)
