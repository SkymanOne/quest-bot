import telebot
from telebot import types
from models_pack import db_access, my_loging
from token_const import token

bot = telebot.TeleBot(token)


def parse_user(message: types.Message):
    info = '{name} {surname} ({user_id})'.\
        format(name=message.from_user.first_name,
               surname=message.from_user.last_name,
               user_id=message.from_user.id)
    return info


def get_main_markup():
    main_markup = types.ReplyKeyboardMarkup()
    main_markup.row('–ù–∞—á–∞—Ç—å –∏–≥—Ä—É‚õ≥Ô∏è', '–õ–∏–¥–µ—Ä—ã –ø–æ –∏–≥—Ä–∞–º‚öúÔ∏è')
    main_markup.row('–°–ø—Ä–∞–≤–∫–∞üåö', '–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä')
    return main_markup


def get_games_markup():
    games_markup = types.ReplyKeyboardMarkup()
    list_of_games = db_access.get_all_games()
    for game in list_of_games:
        games_markup.row(game.game_name)
    games_markup.row('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚úÖ')
    return games_markup


@bot.message_handler(commands=['start'])
@bot.message_handler(func=lambda message: message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚úÖ')
def main_start(message: types.Message):
    my_loging.info('{user} -- –Ω–∞—á–∞—Ç–∞ —Ä–∞–±–æ—Ç–∞ —Å –±–æ—Ç–æ–º, –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ /start –∏–ª–∏ –ì–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                   .format(user=parse_user(message)))
    bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, ' + message.from_user.first_name
                     + ', —á—Ç–æ –∂–µ–ª–∞–µ—à—å?', reply_markup=get_main_markup())


@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É‚õ≥Ô∏è')
@bot.message_handler(func=lambda message: message.text == '–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä')
def show_games(message: types.Message):
    if message.text == '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É‚õ≥Ô∏è':
        list_of_games = db_access.get_all_games()
        for game in list_of_games:
            text = '{gname}\n\n{gtext}'.format(gname=game.game_name,
                                               gtext=game.game_description)
            bot.send_message(message.from_user.id, text)
        msg = bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞',
                               reply_markup=get_games_markup())
        bot.register_next_step_handler(msg, start_game)
    elif message.text == '–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä':
        msg = bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É',
                               reply_markup=get_games_markup())
        bot.register_next_step_handler(msg, rating_of_games)


def start_game(message: types.Message):
    game = db_access.search_game(message.text)
    if game is None:
        bot.send_message(message.from_user.id, '–ò–≥—Ä—É –Ω–µ –≤—ã–±—Ä–∞–ª–∏',
                         reply_markup=get_main_markup())
    else:
        pass


def rating_of_games(message: types.Message):
    game = db_access.search_game(message.text)
    if game is None:
        bot.send_message(message.from_user.id, '–ò–≥—Ä—É –Ω–µ –≤—ã–±—Ä–∞–ª–∏',
                         reply_markup=get_main_markup())
    else:
        pass


bot.polling(True)
# TODO: –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ª–æ–≥–∏–∫—É: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è(–Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã, —Ä–µ–π—Ç–∏–Ω–≥ –∏ —Ç–ø), –∞ –ø–æ—Ç–æ–º –≤—ã–±–æ—Ä –∏–≥—Ä—ã
# TODO: –ø—Ä–æ–ø–∏—Å–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
# TODO: —Å–¥–µ–ª–∞—Ç—å –≤—Å—ë –¥–æ —á–µ—Ç–≤–µ—Ä–≥–∞
